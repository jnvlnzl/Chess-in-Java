@startuml

title __Chess Application's Class Diagram__\n

    class Bishop {
        + Bishop()
        + canMoveTo()
        + getType()
    }

    class Chess {
        + gameOver : boolean
        - currentColor : int
        - display : ChessDisplay
        - selectedPiece : ChessPiece
        + init()
        + mouseClicked()
        + mouseEntered()
        + mouseExited()
        + mousePressed()
        + mouseReleased()
        - highlightAvailableMoves()
  }

    class ChessBoard {
        {static} + BOARD_SIZE : int
        - board : ChessPiece[][]
        + ChessBoard()
        + addPiece()
        + canMoveTo()
        + moveTo()
        + pieceAt()
        + removePiece()
        - initializeBoard()
        - isValidPosition()
        - promotePawn()
    }


    class King {
        + King()
        + canMoveTo()
        + getType()
    }


    class Knight {
        + Knight()
        + canMoveTo()
        + getType()
    }


    class Pawn {
        + Pawn()
        + canMoveTo()
        + getType()
        + isFirstMove()
    }

  

    enum PieceType {
      BISHOP
      KING
      KNIGHT
      PAWN
      QUEEN
      ROOK
    }

    class Queen {
        + Queen()
        + canMoveTo()
        + getType()
    }
  

    class Rook {
        + Rook()
        + canMoveTo()
        + getType()
    }


  Bishop -up-|> ChessPiece
  Chess .up.|> java.awt.event.MouseListener
  Chess -up-|> GraphicsProgram
  Chess o-- ChessBoard : board
  ChessBoard -up-|> DrawableObject
  King -up-|> ChessPiece
  Knight -up-|> ChessPiece
  Pawn -up-|> ChessPiece
  Queen -up-|> ChessPiece
  Rook -up-|> ChessPiece


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
